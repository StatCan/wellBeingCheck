/* tslint:disable */
/* eslint-disable */
/**
 * Pilot Mobile App API
 * API to support retreiving config data, submit app paradata and obtain graphs to be used by the WellBeringCheck mobile app.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface SubmitParadataRequest {
    body: object;
}

/**
 * no description
 */
export class ParadataApi extends runtime.BaseAPI {

    /**
     * The mobile app collects data related to how scheduled notification were actioned. That data cannot be submitted through EQ so there is a need to send that over and link to the deviceId in the back-end. 
     * Submit paradata collected on the device to the back-end
     */
    async submitParadataRaw(requestParameters: SubmitParadataRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling submitParadata.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/paradata`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The mobile app collects data related to how scheduled notification were actioned. That data cannot be submitted through EQ so there is a need to send that over and link to the deviceId in the back-end. 
     * Submit paradata collected on the device to the back-end
     */
    async submitParadata(requestParameters: SubmitParadataRequest): Promise<void> {
        await this.submitParadataRaw(requestParameters);
    }

}
