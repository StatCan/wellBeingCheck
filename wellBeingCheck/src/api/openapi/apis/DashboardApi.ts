/* tslint:disable */
/* eslint-disable */
/**
 * Pilot Mobile App API
 * API to support retreiving config data, submit app paradata and obtain graphs to be used by the WellBeringCheck mobile app.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GraphLink,
    GraphLinkFromJSON,
    GraphLinkToJSON,
    GraphStyle,
    GraphStyleFromJSON,
    GraphStyleToJSON,
    GraphType,
    GraphTypeFromJSON,
    GraphTypeToJSON,
} from '../models';

export interface GetChartRequest {
    type: GraphType;
    style?: GraphStyle;
    width?: number;
    height?: number;
    acceptLanguage?: string;
}

/**
 * no description
 */
export class DashboardApi extends runtime.BaseAPI {

    /**
     * Renders the current dahsboard data in the request type and style. The screen resolution given as parameters will be used to optimize the rendering for the device. 
     * Retrieve a graph image in the given type and style
     */
    async getChartRaw(requestParameters: GetChartRequest): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling getChart.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.style !== undefined) {
            queryParameters['style'] = requestParameters.style;
        }

        if (requestParameters.width !== undefined) {
            queryParameters['width'] = requestParameters.width;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/dashboard/graph/{type}`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters.type))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Renders the current dahsboard data in the request type and style. The screen resolution given as parameters will be used to optimize the rendering for the device. 
     * Retrieve a graph image in the given type and style
     */
    async getChart(requestParameters: GetChartRequest): Promise<Blob> {
        const response = await this.getChartRaw(requestParameters);
        return await response.value();
    }

    /**
     * Since no data per se is sent to the mobile app, all dashboard graphics are rendered on the server. The list of graphs to be displayed controlled by the server. This operation returns that list and the mobile app will retrieve each one of them right away. 
     * Returns URLs to all dashboard graphs that the mobile will display
     */
    async getGraphUrlsRaw(): Promise<runtime.ApiResponse<Array<GraphLink>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/dashboard/graphs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GraphLinkFromJSON));
    }

    /**
     * Since no data per se is sent to the mobile app, all dashboard graphics are rendered on the server. The list of graphs to be displayed controlled by the server. This operation returns that list and the mobile app will retrieve each one of them right away. 
     * Returns URLs to all dashboard graphs that the mobile will display
     */
    async getGraphUrls(): Promise<Array<GraphLink>> {
        const response = await this.getGraphUrlsRaw();
        return await response.value();
    }

}
