/* tslint:disable */
/* eslint-disable */
/**
 * Pilot Mobile App API
 * API to support retreiving config data, submit app paradata and obtain graphs to be used by the WellBeringCheck mobile app.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Links,
    LinksFromJSON,
    LinksToJSON,
} from '../models';

/**
 * no description
 */
export class ConfigApi extends runtime.BaseAPI {

    /**
     * If there are some functionnalities on the Mobile App that can be enabled or disabled from the server. The Mobile App will check from time to time and adjusts itself accordingly
     * Returns a list of configuration flags
     */
    async getFlagsRaw(): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/flags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * If there are some functionnalities on the Mobile App that can be enabled or disabled from the server. The Mobile App will check from time to time and adjusts itself accordingly
     * Returns a list of configuration flags
     */
    async getFlags(): Promise<{ [key: string]: string; }> {
        const response = await this.getFlagsRaw();
        return await response.value();
    }

    /**
     * The mobile app collects responses through EQ anonymous portal. The returned URI are the EQ anonymous references to Questionnaire A & B and confirmation page
     * Returns the URL of the two questionnaires A & B and confirmation page
     */
    async getLinksRaw(): Promise<runtime.ApiResponse<Links>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/links`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LinksFromJSON(jsonValue));
    }

    /**
     * The mobile app collects responses through EQ anonymous portal. The returned URI are the EQ anonymous references to Questionnaire A & B and confirmation page
     * Returns the URL of the two questionnaires A & B and confirmation page
     */
    async getLinks(): Promise<Links> {
        const response = await this.getLinksRaw();
        return await response.value();
    }

}
