/* tslint:disable */
/* eslint-disable */
/**
 * Pilot Mobile App API
 * API to support retreiving config data, submit app paradata and obtain graphs to be used by the WellBeringCheck mobile app.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AuthenticateInput,
    AuthenticateInputFromJSON,
    AuthenticateInputToJSON,
    ResetPasswordInput,
    ResetPasswordInputFromJSON,
    ResetPasswordInputToJSON,
    SetPasswordInput,
    SetPasswordInputFromJSON,
    SetPasswordInputToJSON,
} from '../models';

export interface AuthenticateRequest {
    authenticateInput: AuthenticateInput;
}

export interface ResetPasswordRequest {
    resetPasswordInput: ResetPasswordInput;
}

export interface SetPasswordRequest {
    setPasswordInput: SetPasswordInput;
}

/**
 * no description
 */
export class SecurityApi extends runtime.BaseAPI {

    /**
     * In order to interact with the API a security token is required to keep the interaction between the mobile  app and the back-end server.   This operation authenticates the mobile app and returns a security token that is valid for 20 minutes. 
     * Authenticate and get a JWT token for subsequent use
     */
    async authenticateRaw(requestParameters: AuthenticateRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.authenticateInput === null || requestParameters.authenticateInput === undefined) {
            throw new runtime.RequiredError('authenticateInput','Required parameter requestParameters.authenticateInput was null or undefined when calling authenticate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/security/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticateInputToJSON(requestParameters.authenticateInput),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * In order to interact with the API a security token is required to keep the interaction between the mobile  app and the back-end server.   This operation authenticates the mobile app and returns a security token that is valid for 20 minutes. 
     * Authenticate and get a JWT token for subsequent use
     */
    async authenticate(requestParameters: AuthenticateRequest): Promise<string> {
        const response = await this.authenticateRaw(requestParameters);
        return await response.value();
    }

    /**
     * When the mobile app user forgot the password it can be reset by providing the correct  answer to the security question. This is an un-authenticated call since the password is only reset when the  respondent could not remember the password. 
     * Reset the password for a deviceId
     */
    async resetPasswordRaw(requestParameters: ResetPasswordRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.resetPasswordInput === null || requestParameters.resetPasswordInput === undefined) {
            throw new runtime.RequiredError('resetPasswordInput','Required parameter requestParameters.resetPasswordInput was null or undefined when calling resetPassword.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/security/password`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ResetPasswordInputToJSON(requestParameters.resetPasswordInput),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * When the mobile app user forgot the password it can be reset by providing the correct  answer to the security question. This is an un-authenticated call since the password is only reset when the  respondent could not remember the password. 
     * Reset the password for a deviceId
     */
    async resetPassword(requestParameters: ResetPasswordRequest): Promise<void> {
        await this.resetPasswordRaw(requestParameters);
    }

    /**
     * Once a device onboarded, it must secure access by setting a password. This can only be done once, Right after  the submission of Quesionnaire A.  Any attempt to set the password once the password is already set will fail. 
     * Sets the password and security answer for a deviceId
     */
    async setPasswordRaw(requestParameters: SetPasswordRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.setPasswordInput === null || requestParameters.setPasswordInput === undefined) {
            throw new runtime.RequiredError('setPasswordInput','Required parameter requestParameters.setPasswordInput was null or undefined when calling setPassword.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/security/password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetPasswordInputToJSON(requestParameters.setPasswordInput),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Once a device onboarded, it must secure access by setting a password. This can only be done once, Right after  the submission of Quesionnaire A.  Any attempt to set the password once the password is already set will fail. 
     * Sets the password and security answer for a deviceId
     */
    async setPassword(requestParameters: SetPasswordRequest): Promise<void> {
        await this.setPasswordRaw(requestParameters);
    }

}
